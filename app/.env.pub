#!/bin/bash

NORMAL=$(echo -e '\033[0m')
RED=$(echo -e '\033[31m')
GREEN=$(echo -e '\033[0;32m')
LGREEN=$(echo -e '\033[1;32m')
BLUE=$(echo -e '\033[0;34m')
LBLUE=$(echo -e '\033[1;34m')
YELLOW=$(echo -e '\033[0;33m')

## aliases:
alias k='kubectl'
alias tf='terraform'
alias ll='ls -lahGF'

###########################

####### functions: #######
cheat() { curl "https://cheat.sh/$*"; }
base64_d() { echo "$1" | base64 -d; }

### SSH
enable_proxy() {
  export socks_proxy_ip=127.0.0.1
  export socks_proxy_port=8888
  export socks_proxy="socks://$socks_proxy_ip:$socks_proxy_port"
  export all_proxy=$socks_proxy
}

# get info about site certificate:
cert_info() { echo | openssl s_client -showcerts -servername "$1" -connect "$1":443 2>/dev/null | openssl x509 -inform pem -noout -text; }
##########################

####### GIT ##############
alias gp='git pull'
alias gs='git status'
gb() { git branch "$@"; }
## git location:
parse_git_branch() {
  git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
##########################

### bash customization###
# and get current k8s context:
parse_eks_context() {
  kubectl config current-context 2>/dev/null | sed "s/arn:aws:eks://g"
}
export PS1="${GREEN}\w ${RED}\$(parse_git_branch)${NORMAL}\n${YELLOW}\u${RED}@\H${NORMAL}\n[\$(date +%R)] \$ "
FOR_k8S="\[\e[1:49:94m\]\$(parse_eks_context)$\[\e[00m\] $PS1"

##########################

####### k8s ##############
alias kcgc='kubectl config get-contexts'
kcuc() { kubectl config use-context "$1"; }
k_set_namespace() { kubectl config set-context --current --namespace="$1"; }
# to clear the context:
k_clear() { kubectl config unset current-context >/dev/null; }

alias kgns='kubectl get namespaces'
alias kgno='kubectl get nodes -o wide'
alias kdno='kubectl describe nodes'
keit_bash() { kubectl exec -it "$@" -- /bin/bash; }
keit_sh() { kubectl exec -it "$@" -- /bin/sh; }
kgsvc() { kubectl get service -o wide "$@"; }
kgscr() { kubectl get secrets -o wide "$@"; }
kgp() { kubectl get pods -o wide "$@"; }
kdp() { kubectl delete pod "$@"; }
kgd() { kubectl get deployments "$@"; }
kgi() { kubectl get ingress -o wide "$@"; }
kga() { kubectl get all -o wide --show-labels "$@"; }
kge() { kubectl get events --sort-by='.lastTimestamp' "$@"; }
kgc() { kubectl get certificate "$@"; }
kgcr() { kubectl get certificaterequest "$@"; }
kgo() { kubectl get order "$@"; }
kgrq() { kubectl get resourcequota "$@"; }
kerq() { kubectl edit resourcequota "$@"; }

kgnp() { kubectl get networkpolicy "$@"; }
kenp() { kubectl edit networkpolicy "$@"; }
kdnp() { kubectl delete networkpolicy "$@"; }

kgnp_calico() { kubectl get networkpolicies.projectcalico.org "$@"; }
kenp_calico() { kubectl edit networkpolicies.projectcalico.org "$@"; }
kdnp_calico() { kubectl delete networkpolicies.projectcalico.org "$@"; }

#jobs
kgj() { kubectl get jobs; }
klj() { kubectl logs -l job-name="$1"; }
#######################

####### Python ########
py_env() { python3 -m venv py_env && source py_env/bin/activate; }

######### Tools ########
# Display info about the system:
sys_info() {
  echo -e "System Information"
  echo -e "==================="
  echo -e "Hostname: $(hostname)"
  echo -e "Kernel: $(uname -r)"
  echo -e "OS: $(lsb_release -d | cut -f2-)"
  echo -e "Architecture: $(uname -m)"
  echo -e "Uptime: $(uptime -p)"
}
# Display eth interface information:
eth_info() {
  printf "%-20s %-20s %-10s %-15s %-15s %-15s\n" \
    "Interface" "MAC Address" "Status" "Speed" "Bridge Port" "Bond Master"

  for iface_path in /sys/class/net/*; do
    iface=$(basename "$iface_path")

    # Skip loopback and docker-style virtual interfaces
    [[ "$iface" == "lo" || "$iface" == veth* ]] && continue
    [[ ! -d "$iface_path" ]] && continue

    mac=$(cat "$iface_path/address" 2>/dev/null)
    status=$(cat "$iface_path/operstate" 2>/dev/null)

    # Get speed info if possible
    if ethtool "$iface" &>/dev/null; then
      speed=$(ethtool "$iface" | awk -F': ' '/Speed/ {print $2}')
      [[ -z "$speed" ]] && speed="Unknown!"
    else
      speed="N/A"
    fi

    # Check bridge port membership
    if [[ -e "$iface_path/brport/bridge" ]]; then
      bridge=$(basename "$(readlink "$iface_path/brport/bridge")")
    else
      # bridge="None"
      bridge=""

    fi

    # Check bond slave membership
    if [[ -e "$iface_path/bonding_slave/perm_hwaddr" ]]; then
      # Look for master symlink pointing to bond
      master_path=$(readlink -f "$iface_path/master")
      bond_master=$(basename "$master_path")
    else
      # bond_master="None"
      bond_master=""
    fi

    printf "%-20s %-20s %-10s %-15s %-15s %-15s\n" \
      "$iface" "$mac" "$status" "$speed" "$bridge" "$bond_master"
  done
}

########################
