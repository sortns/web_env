#!/bin/bash



NORMAL=$(echo -e '\033[0m')
RED=$(echo -e '\033[31m')
GREEN=$(echo -e '\033[0;32m')
LGREEN=$(echo -e '\033[1;32m')
BLUE=$(echo -e '\033[0;34m')
LBLUE=$(echo -e '\033[1;34m')
YELLOW=$(echo -e '\033[0;33m')


#### High Lighted OUTPUT:::
HIGHLIGHT_HASH="d0a40bc94fb2c6302d705394849c1a5461f96c4af432f572ef685246d90ee502"

TEMP_SCRIPT_NAME=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20)
curl -s https://web.ixsa.net/highlight.sh -o /tmp/$TEMP_SCRIPT_NAME
REMOTE_SCRIPT_CALCULATED_HASH=$(sha256sum /tmp/$TEMP_SCRIPT_NAME | awk '{ print $1}')
if [ "$REMOTE_SCRIPT_CALCULATED_HASH" == "$HIGHLIGHT_HASH" ]; then
    source /tmp/"$TEMP_SCRIPT_NAME"
else
    echo -e "${RED}sha256sum checksum does not match. Remotescript wasn't applied${NORMAL}"
fi
rm -f /tmp/$TEMP_SCRIPT_NAME

function run_with_highlight() {
    "$@" | hl
}
##########################


## aliases:
alias k='run_with_highlight kubectl'
alias tf='run_with_highlight terraform'
alias ll='run_with_highlight ls -lahGF'
alias ip='run_with_highlight ip'
alias cat='run_with_highlight cat'
alias grep='run_with_highlight grep'
alias history='run_with_highlight history'
alias tail='run_with_highlight tail'


###########################



### bash customization###
# and get current k8s context:
parse_eks_context() {
    kubectl config current-context 2>/dev/null | sed "s/arn:aws:eks://g"
}
export PS1="\[\e[32m\]\w \[\e[91m\]\$(parse_git_branch)\[\e[00m\]\n[\$(date +%R)] $ "
FOR_k8S="\[\e[1:49:94m\]\$(parse_eks_context)$\[\e[00m\] $PS1"

##########################




####### functions: #######
cheat() { curl "https://cheat.sh/$*"; }
base64_d() { echo "$1" | base64 -d; }

### SSH
enable_proxy() {
  export socks_proxy_ip=127.0.0.1
  export socks_proxy_port=8888
  export socks_proxy="socks://$socks_proxy_ip:$socks_proxy_port"
  export all_proxy=$socks_proxy
}

# get info about site certificate:
cert_info() { echo | openssl s_client -showcerts -servername "$1" -connect "$1":443 2>/dev/null | openssl x509 -inform pem -noout -text; }
##########################


####### GIT ##############
alias gp='git pull'
alias gs='git status'
gb() { git branch "$@"; }
## git location:
parse_git_branch() {
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
##########################


####### k8s ##############
alias kcgc='kubectl config get-contexts'
kcuc() { kubectl config use-context "$1"; }
k_set_namespace() { kubectl config set-context --current --namespace="$1"; }
# to clear the context:
k_clear() { kubectl config unset current-context >/dev/null; }

alias kgns='kubectl get namespaces'
alias kgno='kubectl get nodes -o wide'
alias kdno='kubectl describe nodes'
keit_bash() { kubectl exec -it "$@" -- /bin/bash; }
keit_sh() { kubectl exec -it "$@" -- /bin/sh; }
kgsvc() { kubectl get service -o wide "$@"; }
kgscr() { kubectl get secrets -o wide "$@"; }
kgp() { kubectl get pods -o wide "$@"; }
kdp() { kubectl delete pod "$@"; }
kgd() { kubectl get deployments "$@"; }
kgi() { kubectl get ingress -o wide "$@"; }
kga() { kubectl get all -o wide --show-labels "$@"; }
kge() { kubectl get events --sort-by='.lastTimestamp' "$@"; }
kgc() { kubectl get certificate "$@"; }
kgcr() { kubectl get certificaterequest "$@"; }
kgo() { kubectl get order "$@"; }
kgrq() { kubectl get resourcequota "$@"; }
kerq() { kubectl edit resourcequota "$@"; }

kgnp() { kubectl get networkpolicy "$@"; }
kenp() { kubectl edit networkpolicy "$@"; }
kdnp() { kubectl delete networkpolicy "$@"; }

kgnp_calico() { kubectl get networkpolicies.projectcalico.org "$@"; }
kenp_calico() { kubectl edit networkpolicies.projectcalico.org "$@"; }
kdnp_calico() { kubectl delete networkpolicies.projectcalico.org "$@"; }

#jobs
kgj() { kubectl get jobs; }
klj() { kubectl logs -l job-name="$1"; }
#######################

####### Python ########
py_env() { python3 -m venv py_env && source py_env/bin/activate; }



