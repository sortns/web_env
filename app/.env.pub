#!/bin/bash

NORMAL=$(echo -e '\033[0m')
RED=$(echo -e '\033[31m')
GREEN=$(echo -e '\033[0;32m')
LGREEN=$(echo -e '\033[1;32m')
BLUE=$(echo -e '\033[0;34m')
LBLUE=$(echo -e '\033[1;34m')
YELLOW=$(echo -e '\033[0;33m')
PURPLE=$'\033[0;35m'
NC=$'\033[0m'

## aliases:
alias k='kubectl'
alias tf='terraform'
alias ll='ls -lahGF'

###########################

### SSH ###############
  enable_proxy() {
    export socks_proxy_ip=127.0.0.1
    export socks_proxy_port=8888
    export socks_proxy="socks://$socks_proxy_ip:$socks_proxy_port"
    export all_proxy=$socks_proxy
  }

  ssh_auth_log() {
    #!/bin/bash

    if [[ $EUID -ne 0 ]]; then
      echo "‚ö†Ô∏è  Please run as root to access full authentication logs"
      exit 1
    fi

    echo "üìã SSH Login Summary"
    echo "-----------------------------------------------"
    echo "TIME                  | IP            | USER         | STATUS"
    echo "-----------------------------------------------"

    if [[ -f "/var/log/auth.log" ]]; then
      # for ubuntu/debian systems
      log_file="/var/log/auth.log"
    elif [[ -f "/var/log/secure" ]]; then
      # for centos/redhat systems
      log_file="/var/log/secure"
    else
      echo "‚ùå No known SSH auth log found"
      exit 1
    fi

    # Load logs
    if [[ -f "$log_file" ]]; then
      log_data=$(grep -E "sshd.*(Failed|Accepted|Invalid user|Connection closed by)" "$log_file")
    elif command -v journalctl &>/dev/null; then
      log_data=$(journalctl -u ssh --no-pager | grep -E "sshd.*(Failed|Accepted|Invalid user|Connection closed by)")
    else
      echo "‚ùå No valid log source found"
      exit 1
    fi

    # Temp files for aggregation
    tmp_full_log=$(mktemp)
    tmp_failed_by_ip=$(mktemp)
    tmp_failed_by_user=$(mktemp)

    # Parse each line
    echo "$log_data" | while read -r line; do
      time=$(echo "$line" | awk '{print $1, $2, $3}')
      ip=$(echo "$line" | grep -oP '([0-9]{1,3}\.){3}[0-9]{1,3}')
      port=$(echo "$line" | grep -oP '(?<=port )\d+')

      if echo "$line" | grep -q "Accepted"; then
        status="SUCCESS"
        user=$(echo "$line" | grep -oP '(?<=for )[a-zA-Z0-9._-]+(?= from)')

      elif echo "$line" | grep -q "Failed password"; then
        status="FAILED"
        user=$(echo "$line" | grep -oP '(?<=for (invalid user )?)[a-zA-Z0-9._-]+(?= from)')
        echo "$ip" >>"$tmp_failed_by_ip"
        echo "$user" >>"$tmp_failed_by_user"

      elif echo "$line" | grep -q "Invalid user"; then
        status="INVALID_USER"
        user=$(echo "$line" | grep -oP '(?<=Invalid user )[a-zA-Z0-9._-]+')
        echo "$ip" >>"$tmp_failed_by_ip"
        echo "$user" >>"$tmp_failed_by_user"

      elif echo "$line" | grep -q "Connection closed by"; then
        status="CONNECTION_CLOSED"
        user=$(echo "$line" | grep -oP '(?<=user )[a-zA-Z0-9._-]+')
        [[ -z "$user" ]] && user="unknown"
      else
        continue
      fi

      printf "%-20s | %-13s | %-12s | %-18s\n" "$time" "$ip" "$user" "$status" >>"$tmp_full_log"
    done

    # Display all parsed events
    cat "$tmp_full_log"

    echo ""
    echo "üî¢ Failed or Invalid Attempts by IP:"
    echo "------------------------------------"
    sort "$tmp_failed_by_ip" | uniq -c | sort -nr | awk '{printf "%-5s %s\n", $1, $2}'

    echo ""
    echo "üî¢ Failed or Invalid Attempts by User:"
    echo "--------------------------------------"
    sort "$tmp_failed_by_user" | uniq -c | sort -nr | awk '{printf "%-5s %s\n", $1, $2}'

    # Cleanup
    rm -f "$tmp_full_log" "$tmp_failed_by_ip" "$tmp_failed_by_user"

  }

#######################

### GIT ###############
  alias gp='git pull'
  alias gs='git status'
  gb() { git branch "$@"; }
  gp_all() {
    # Find all directories that contain a .git folder and execute git pull
    find . -type d -name ".git" | while read git_dir; do
      repo_dir=$(dirname "$git_dir")

      printf "${PURPLE}[${repo_dir}]${NC}\n"

      # Navigate to repo directory and pull the latest changes
      (cd "$repo_dir" && git pull)
    done
  }
  ## git location:
  parse_git_branch() {
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
  }
#######################

### bash custom #######
  # and get current k8s context:
  parse_eks_context() {
    kubectl config current-context 2>/dev/null | sed "s/arn:aws:eks://g"
  }
  export PS1="${GREEN}\w ${RED}\$(parse_git_branch)${NORMAL}\n${YELLOW}\u${RED}@\H${NORMAL}\n[\$(date +%R)] \$ "
  FOR_k8S="\[\e[1:49:94m\]\$(parse_eks_context)$\[\e[00m\] $PS1"

#######################

### k8s ###############
  alias kcgc='kubectl config get-contexts'
  kcuc() { kubectl config use-context "$1"; }
  k_set_namespace() { kubectl config set-context --current --namespace="$1"; }
  # to clear the context:
  k_clear() { kubectl config unset current-context >/dev/null; }

  alias kgns='kubectl get namespaces'
  alias kgno='kubectl get nodes -o wide'
  alias kdno='kubectl describe nodes'
  keit_bash() { kubectl exec -it "$@" -- /bin/bash; }
  keit_sh() { kubectl exec -it "$@" -- /bin/sh; }
  kgsvc() { kubectl get service -o wide "$@"; }
  kgscr() { kubectl get secrets -o wide "$@"; }
  kgp() { kubectl get pods -o wide "$@"; }
  kdp() { kubectl delete pod "$@"; }
  kgd() { kubectl get deployments "$@"; }
  kgi() { kubectl get ingress -o wide "$@"; }
  kga() { kubectl get all -o wide --show-labels "$@"; }
  kge() { kubectl get events --sort-by='.lastTimestamp' "$@"; }
  kgc() { kubectl get certificate "$@"; }
  kgcr() { kubectl get certificaterequest "$@"; }
  kgo() { kubectl get order "$@"; }
  kgrq() { kubectl get resourcequota "$@"; }
  kerq() { kubectl edit resourcequota "$@"; }

  kgnp() { kubectl get networkpolicy "$@"; }
  kenp() { kubectl edit networkpolicy "$@"; }
  kdnp() { kubectl delete networkpolicy "$@"; }

  kgnp_calico() { kubectl get networkpolicies.projectcalico.org "$@"; }
  kenp_calico() { kubectl edit networkpolicies.projectcalico.org "$@"; }
  kdnp_calico() { kubectl delete networkpolicies.projectcalico.org "$@"; }

  #jobs
  kgj() { kubectl get jobs; }
  klj() { kubectl logs -l job-name="$1"; }
  #######################

  ####### Python ########
  py_env() { python3 -m venv py_env && source py_env/bin/activate; }
#######################

### Tools #############
  cheat() { curl "https://cheat.sh/$*"; }
  base64_d() { echo "$1" | base64 -d; }

  # Display info about the system:
  sys_info() {
    echo -e "System Information"
    echo -e "==================="
    echo -e "Hostname: $(hostname)"
    echo -e "Kernel: $(uname -r)"
    echo -e "OS: $(lsb_release -d | cut -f2-)"
    echo -e "Architecture: $(uname -m)"
    echo -e "Uptime: $(uptime -p)"
  }
  # Display eth interface information:
  eth_info() {
    printf "%-20s %-20s %-10s %-15s %-15s %-15s\n" \
      "Interface" "MAC Address" "Status" "Speed" "Bridge Port" "Bond Master"

    for iface_path in /sys/class/net/*; do
      iface=$(basename "$iface_path")

      # Skip loopback and docker-style virtual interfaces
      [[ "$iface" == "lo" || "$iface" == veth* ]] && continue
      [[ ! -d "$iface_path" ]] && continue

      mac=$(cat "$iface_path/address" 2>/dev/null)
      status=$(cat "$iface_path/operstate" 2>/dev/null)

      # Get speed info if possible
      if ethtool "$iface" &>/dev/null; then
        speed=$(ethtool "$iface" | awk -F': ' '/Speed/ {print $2}')
        [[ -z "$speed" ]] && speed="Unknown!"
      else
        speed="N/A"
      fi

      # Check bridge port membership
      if [[ -e "$iface_path/brport/bridge" ]]; then
        bridge=$(basename "$(readlink "$iface_path/brport/bridge")")
      else
        # bridge="None"
        bridge=""

      fi

      # Check bond slave membership
      if [[ -e "$iface_path/bonding_slave/perm_hwaddr" ]]; then
        # Look for master symlink pointing to bond
        master_path=$(readlink -f "$iface_path/master")
        bond_master=$(basename "$master_path")
      else
        # bond_master="None"
        bond_master=""
      fi

      printf "%-20s %-20s %-10s %-15s %-15s %-15s\n" \
        "$iface" "$mac" "$status" "$speed" "$bridge" "$bond_master"
    done
  }
  # get info about site certificate:
  cert_info() { echo | openssl s_client -showcerts -servername "$1" -connect "$1":443 2>/dev/null | openssl x509 -inform pem -noout -text; }

#######################

### Proxmox ###########
  proxmox_instances_info() {
    TMP=$(mktemp)
    VLAN_PRESENT=0

    detect_vlan() {
      for vmid in $(pct list | awk 'NR>1 {print $1}'); do
        config="$(pct config "$vmid" 2>/dev/null)"
        if echo "$config" | grep -qP '^net\d+:.*tag='; then
          VLAN_PRESENT=1
          return
        fi
      done
      for vmid in $(qm list | awk 'NR>1 {print $1}'); do
        config="$(qm config "$vmid" 2>/dev/null)"
        if echo "$config" | grep -qP '^net\d+:.*tag='; then
          VLAN_PRESENT=1
          return
        fi
      done
    }

    detect_vlan

    if ((VLAN_PRESENT)); then
      printf_format="%-6s %-26s %-10s %-30s %-10s %-6s %-8s %-15s %-10s %-12s %-8s\n"
      printf "$printf_format" "Type" "Name" "Status" "IP Address(es)" "Bridge" "VLAN" "OnBoot" "Storage" "DiskSize" "VMID" "Note"
    else
      printf_format="%-6s %-26s %-10s %-30s %-10s %-8s %-15s %-10s %-12s %-8s\n"
      printf "$printf_format" "Type" "Name" "Status" "IP Address(es)" "Bridge" "OnBoot" "Storage" "DiskSize" "VMID" "Note"
    fi

    get_vlan() {
      local net_line="$1"
      local vlan=$(echo "$net_line" | grep -oP 'tag=\K[0-9]+')
      [[ -z "$vlan" ]] && vlan="-"
      echo "$vlan"
    }

    get_lxc_disk_size() {
      local config="$1"
      local size=$(echo "$config" | grep -oP '^rootfs:.*size=\K[0-9]+[GM]')
      [[ -z "$size" ]] && echo "0.0G" && return
      echo "$size" | sed 's/G$/\.0G/; s/M$/M/'
    }

    get_qemu_disk_size() {
      local vmid="$1"
      local total=0
      local tmpfile=$(mktemp)
      qm config "$vmid" >"$tmpfile"
      while IFS= read -r line; do
        case "$line" in
        virtio*:* | scsi*:* | sata*:* | ide*:*)
          [[ "$line" == *cloudinit* ]] && continue
          [[ "$line" == *media=cdrom* ]] && continue
          local vol=$(echo "$line" | cut -d' ' -f2 | cut -d',' -f1 | xargs)
          [[ -z "$vol" ]] && continue
          local storage="${vol%%:*}"
          local vol_id="${vol#*:}"
          if [[ "$storage" == "local-lvm" ]]; then
            local lv_path=$(lvs --noheadings -o lv_path | grep "/$vol_id" | xargs)
            if [[ -n "$lv_path" ]]; then
              local size=$(lvs --noheadings --units g -o lv_size "$lv_path" 2>/dev/null | awk '{gsub(/[[:space:]]|g/,""); print}')
              [[ -z "$size" ]] && size="0"
              total=$(echo "$total + $size" | bc)
            fi
          fi
          ;;
        esac
      done <"$tmpfile"
      rm -f "$tmpfile"
      printf "%.1fG\n" "$total"
    }

    get_lxc_info() {
      local vmid="$1"
      local config="$(pct config "$vmid" 2>/dev/null)"
      local name=$(echo "$config" | awk -F ': ' '/^hostname:/ {print $2}')
      local status=$(pct status "$vmid" | awk '{print $2}')
      local ip=$(echo "$config" | grep -oP 'ip=\K[^,]+' | paste -sd "," -)
      [[ -z "$ip" ]] && ip="N/A"
      local onboot=$(echo "$config" | awk -F ': ' '/^onboot:/ {print $2}')
      [[ -z "$onboot" ]] && onboot="no"
      local storage_vol=$(echo "$config" | grep -oP '^rootfs: \K[^,]+')
      local storage="${storage_vol%%:*}"
      [[ -z "$storage" ]] && storage="N/A"
      local disk_size=$(get_lxc_disk_size "$config")
      local net_line=$(echo "$config" | grep -m1 "^net")
      local bridge=$(echo "$net_line" | grep -oP 'bridge=\K[^,]+')
      [[ -z "$bridge" ]] && bridge="N/A"
      local vlan=$(get_vlan "$net_line")
      local note=$(echo "$config" | awk -F ': ' '/^description:/ {print $2}')
      [[ -z "$note" ]] && note="-"

      if ((VLAN_PRESENT)); then
        printf "$printf_format" "LXC" "$name" "$status" "$ip" "$bridge" "$vlan" "$onboot" "$storage" "$disk_size" "$vmid" "$note" >>"$TMP"
      else
        printf "$printf_format" "LXC" "$name" "$status" "$ip" "$bridge" "$onboot" "$storage" "$disk_size" "$vmid" "$note" >>"$TMP"
      fi
    }

    get_qemu_info() {
      local vmid="$1"
      local config="$(qm config "$vmid" 2>/dev/null)"
      local name=$(echo "$config" | awk -F ': ' '/^name:/ {print $2}')
      local status=$(qm status "$vmid" | awk '{print $2}')
      local onboot=$(echo "$config" | awk -F ': ' '/^onboot:/ {print $2}')
      [[ -z "$onboot" ]] && onboot="no"
      local disk_line=$(echo "$config" | grep -E '^(virtio|scsi|sata|ide)[0-9]+:')
      local storage_vol=$(echo "$disk_line" | grep -oP '^\w+0: \K[^,]+')
      local storage="${storage_vol%%:*}"
      [[ -z "$storage" ]] && storage="N/A"
      local disk_size=$(get_qemu_disk_size "$vmid")
      local ip_list="N/A"
      if [[ "$status" == "running" ]]; then
        ip_list=$(qm guest cmd "$vmid" network-get-interfaces 2>/dev/null |
          jq -r '.[]? | .["ip-addresses"][]? | select(.["ip-address"] | test("^[0-9.]+$")) | .["ip-address"]' |
          grep -v '^127\\.0\\.0\\.1$' | paste -sd "," -)
        [[ -z "$ip_list" ]] && ip_list="N/A"
      fi
      local net_line=$(echo "$config" | grep -m1 "^net")
      local bridge=$(echo "$net_line" | grep -oP 'bridge=\K[^,]+')
      [[ -z "$bridge" ]] && bridge="N/A"
      local vlan=$(get_vlan "$net_line")
      local note=$(echo "$config" | awk -F ': ' '/^(description|notes):/ {print $2}' | head -n1)
      [[ -z "$note" ]] && note="-"

      if ((VLAN_PRESENT)); then
        printf "$printf_format" "QEMU" "$name" "$status" "$ip_list" "$bridge" "$vlan" "$onboot" "$storage" "$disk_size" "$vmid" "$note" >>"$TMP"
      else
        printf "$printf_format" "QEMU" "$name" "$status" "$ip_list" "$bridge" "$onboot" "$storage" "$disk_size" "$vmid" "$note" >>"$TMP"
      fi
    }

    (
      job_count=0
      MAX_JOBS=15
      for vmid in $(pct list | awk 'NR>1 {print $1}'); do
        { get_lxc_info "$vmid"; } &>/dev/null &
        ((++job_count >= MAX_JOBS)) && wait && job_count=0
      done
      for vmid in $(qm list | awk 'NR>1 {print $1}'); do
        { get_qemu_info "$vmid"; } &>/dev/null &
        ((++job_count >= MAX_JOBS)) && wait && job_count=0
      done
      wait
    ) 2>/dev/null

    sort -k10n "$TMP"
    rm -f "$TMP"
  }

  ### Disable auto-start all:
  proxmox_disable_all_autostart() {
    echo "Disabling 'onboot' for all LXC containers..."
    for CTID in $(pct list | awk 'NR>1 {print $1}'); do
      pct set $CTID --onboot 0
    done

    echo "Disabling 'onboot' for all KVM virtual machines..."
    for VMID in $(qm list | awk 'NR>1 {print $1}'); do
      qm set $VMID --onboot 0
    done
  }

  proxmox_enable_all_autostart() {
    # Enable autostart for all:
    echo "Enabling 'onboot' for all LXC containers..."
    for CTID in $(pct list | awk 'NR>1 {print $1}'); do
      pct set $CTID --onboot 1
    done

    echo "Enabling 'onboot' for all KVM virtual machines..."
    for VMID in $(qm list | awk 'NR>1 {print $1}'); do
      qm set $VMID --onboot 1
    done
  }
#######################

### HAproxy ###########
  haproxy_top_ip-conn-day() {
    local LOGDIR="/var/log"
    local FILES=$(ls $LOGDIR/haproxy.log*)

    zcat -f $FILES |
      awk '
  {
    # Extract IP (before colon)
    match($0, /^.*haproxy\[[0-9]+\]: ([^:]+):[0-9]+/, ip)
    # Extract date from request time
    match($0, /\[([0-9]+)\/([A-Za-z]+)\/([0-9]{4})/, dt)
    if (ip[1] != "" && dt[1] != "" && dt[2] != "" && dt[3] != "") {
      # Format date as YYYY-MM-DD
      months["Jan"]="01"; months["Feb"]="02"; months["Mar"]="03"; months["Apr"]="04";
      months["May"]="05"; months["Jun"]="06"; months["Jul"]="07"; months["Aug"]="08";
      months["Sep"]="09"; months["Oct"]="10"; months["Nov"]="11"; months["Dec"]="12";
      day = dt[1]; mon = months[dt[2]]; year = dt[3];
      printf("%s %s\n", year "-" mon "-" day, ip[1]);
    }
  }' | sort | uniq -c | sort -k2,2 -k1,1nr |
      awk '
  {
    count[$2][$3] = $1
  }
  END {
    PROCINFO["sorted_in"] = "@ind_str_asc"
    for (day in count) {
      print "==== Top 10 IPs for " day " ===="
      n = 0
      for (ip in count[day]) {
        printf "%s - %s connections\n", ip, count[day][ip]
        n++
        if (n == 10) break
      }
      print ""
    }
  }'
  }

#######################

### Nginx #############

  nginx_top_ip-conn-day() {

    local tmpfile=$(mktemp)

    for file in /var/log/nginx/*access.log*; do
      if [[ $file == *.gz ]]; then
        zcat "$file"
      else
        cat "$file"
      fi | awk -v logfile="$file" '
      {
          ip = $1
          match($4, /\[([0-9]{2}\/[A-Za-z]{3}\/[0-9]{4})/, m)
          date = m[1]
          if (ip != "" && date != "") {
              key = date "|" ip
              count[key]++
              filemap[key] = logfile
          }
      }
      END {
          for (k in count) {
              split(k, parts, "|")
              date = parts[1]
              ip = parts[2]
              printf "%s|%s|%d|%s\n", date, ip, count[k], filemap[k]
          }
      }'
    done >"$tmpfile"

    cut -d'|' -f1 "$tmpfile" | sort | uniq | while read date; do
      echo "Date: $date"
      grep "^$date|" "$tmpfile" | sort -t'|' -k3,3nr | head -n 25 | awk -F'|' '{printf "\t%s\t%s\t%s\n", $2, $3, $4}'
    done

    rm "$tmpfile"
  }

  nginx_top_ip_country-conn-day() {
    awk '{print $1, $2}' /var/log/nginx/*access.log | sort | uniq -c | sort -nr | head -n 20 | while read count ip host path; do country=$(geoiplookup "$ip" | awk -F ': ' '{print $2}'); printf "%7s %-15s %-30s %-20s %s\n" "$count" "$ip" "$host" "$country"; done
  }
  
  nginx_top_ip_country-conn-day-json() {
    echo "["

    first=1

    awk '{print $1, $2}' /var/log/nginx/*access.log | sort | uniq -c | sort -nr | head -n 20 | while read count ip host; do
        country=$(geoiplookup "$ip" | awk -F ': ' '{print $2}' | sed 's/"/\\"/g')
        
        if [ "$first" -eq 0 ]; then
            echo ","
        fi

        printf '  {\n'
        printf '    "ip": "%s",\n' "$ip"
        printf '    "host": "%s",\n' "$host"
        printf '    "count": %s,\n' "$count"
        printf '    "country": "%s"\n' "$country"
        printf '  }'

        first=0
    done

    echo
    echo "]"
  }

  nginx_top_ip-conn() {
    awk '{print $1}' /var/log/nginx/*access.log | sort | uniq -c | sort -nr | head -20
  }

  nginx_most_requested_url_last_hour() {
    grep "$(date --date='1 hour ago' "+%d/%b/%Y:%H")" /var/log/nginx/*_access.log | awk '{print $1, $7, $9}' | sort | uniq -c | sort -nr | head -20
  }

  nginx_errors_count_last_hour() {
    grep "$(date --date='1 hour ago' "+%Y/%m/%d %H")" /var/log/nginx/*_error.log | sort | uniq -c | sort -nr | head -20
  }
#######################

### scanner ###########
  # quick scan:
  nmap_quick() {
    if [[ -z "$1" ]]; then
      echo "Usage: nmap_quick <target>"
      echo "Usage: nmap_quick <target> <port>"
      return 1
    fi

    if ! command -v nmap >/dev/null 2>&1; then
      echo "Error: nmap command not found. Please install nmap." >&2
      return 1
    fi

    if [[ -n "$2" ]]; then
      echo "${LGREEN}Scanning ${YELLOW}$2${LGREEN} port in ${YELLOW}$1"
      nmap -sV --script=banner -p"$2" --min-parallelism 100 --max-parallelism 256 --max-retries 1  -oG - "$1" | grep -v "Up\|closed\|filtered" 
    else
      echo "${LGREEN}Scanning all hosts in ${YELLOW}$1"
      nmap -sn --min-parallelism 100 --max-parallelism 256 --max-retries 1 -T5 -oG - "$1" 
    fi
  }

#######################

###################################
