#!/bin/bash

NORMAL=$(echo -e '\033[0m')
RED=$(echo -e '\033[31m')
GREEN=$(echo -e '\033[0;32m')
LGREEN=$(echo -e '\033[1;32m')
BLUE=$(echo -e '\033[0;34m')
LBLUE=$(echo -e '\033[1;34m')
YELLOW=$(echo -e '\033[0;33m')

## aliases:
alias k='kubectl'
alias tf='terraform'
alias ll='ls -lahGF'

###########################

####### functions: #######
cheat() { curl "https://cheat.sh/$*"; }
base64_d() { echo "$1" | base64 -d; }

### SSH
enable_proxy() {
  export socks_proxy_ip=127.0.0.1
  export socks_proxy_port=8888
  export socks_proxy="socks://$socks_proxy_ip:$socks_proxy_port"
  export all_proxy=$socks_proxy
}

# get info about site certificate:
cert_info() { echo | openssl s_client -showcerts -servername "$1" -connect "$1":443 2>/dev/null | openssl x509 -inform pem -noout -text; }
##########################

####### GIT ##############
alias gp='git pull'
alias gs='git status'
gb() { git branch "$@"; }
## git location:
parse_git_branch() {
  git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
##########################

### bash customization###
# and get current k8s context:
parse_eks_context() {
  kubectl config current-context 2>/dev/null | sed "s/arn:aws:eks://g"
}
export PS1="${GREEN}\w ${RED}\$(parse_git_branch)${NORMAL}\n${YELLOW}\u${RED}@\H${NORMAL}\n[\$(date +%R)] \$ "
FOR_k8S="\[\e[1:49:94m\]\$(parse_eks_context)$\[\e[00m\] $PS1"

##########################

####### k8s ##############
alias kcgc='kubectl config get-contexts'
kcuc() { kubectl config use-context "$1"; }
k_set_namespace() { kubectl config set-context --current --namespace="$1"; }
# to clear the context:
k_clear() { kubectl config unset current-context >/dev/null; }

alias kgns='kubectl get namespaces'
alias kgno='kubectl get nodes -o wide'
alias kdno='kubectl describe nodes'
keit_bash() { kubectl exec -it "$@" -- /bin/bash; }
keit_sh() { kubectl exec -it "$@" -- /bin/sh; }
kgsvc() { kubectl get service -o wide "$@"; }
kgscr() { kubectl get secrets -o wide "$@"; }
kgp() { kubectl get pods -o wide "$@"; }
kdp() { kubectl delete pod "$@"; }
kgd() { kubectl get deployments "$@"; }
kgi() { kubectl get ingress -o wide "$@"; }
kga() { kubectl get all -o wide --show-labels "$@"; }
kge() { kubectl get events --sort-by='.lastTimestamp' "$@"; }
kgc() { kubectl get certificate "$@"; }
kgcr() { kubectl get certificaterequest "$@"; }
kgo() { kubectl get order "$@"; }
kgrq() { kubectl get resourcequota "$@"; }
kerq() { kubectl edit resourcequota "$@"; }

kgnp() { kubectl get networkpolicy "$@"; }
kenp() { kubectl edit networkpolicy "$@"; }
kdnp() { kubectl delete networkpolicy "$@"; }

kgnp_calico() { kubectl get networkpolicies.projectcalico.org "$@"; }
kenp_calico() { kubectl edit networkpolicies.projectcalico.org "$@"; }
kdnp_calico() { kubectl delete networkpolicies.projectcalico.org "$@"; }

#jobs
kgj() { kubectl get jobs; }
klj() { kubectl logs -l job-name="$1"; }
#######################

####### Python ########
py_env() { python3 -m venv py_env && source py_env/bin/activate; }

######### Tools ########
# Display info about the system:
sys_info() {
  echo -e "System Information"
  echo -e "==================="
  echo -e "Hostname: $(hostname)"
  echo -e "Kernel: $(uname -r)"
  echo -e "OS: $(lsb_release -d | cut -f2-)"
  echo -e "Architecture: $(uname -m)"
  echo -e "Uptime: $(uptime -p)"
}
# Display eth interface information:
eth_info() {
  printf "%-20s %-20s %-10s %-15s %-15s %-15s\n" \
    "Interface" "MAC Address" "Status" "Speed" "Bridge Port" "Bond Master"

  for iface_path in /sys/class/net/*; do
    iface=$(basename "$iface_path")

    # Skip loopback and docker-style virtual interfaces
    [[ "$iface" == "lo" || "$iface" == veth* ]] && continue
    [[ ! -d "$iface_path" ]] && continue

    mac=$(cat "$iface_path/address" 2>/dev/null)
    status=$(cat "$iface_path/operstate" 2>/dev/null)

    # Get speed info if possible
    if ethtool "$iface" &>/dev/null; then
      speed=$(ethtool "$iface" | awk -F': ' '/Speed/ {print $2}')
      [[ -z "$speed" ]] && speed="Unknown!"
    else
      speed="N/A"
    fi

    # Check bridge port membership
    if [[ -e "$iface_path/brport/bridge" ]]; then
      bridge=$(basename "$(readlink "$iface_path/brport/bridge")")
    else
      # bridge="None"
      bridge=""

    fi

    # Check bond slave membership
    if [[ -e "$iface_path/bonding_slave/perm_hwaddr" ]]; then
      # Look for master symlink pointing to bond
      master_path=$(readlink -f "$iface_path/master")
      bond_master=$(basename "$master_path")
    else
      # bond_master="None"
      bond_master=""
    fi

    printf "%-20s %-20s %-10s %-15s %-15s %-15s\n" \
      "$iface" "$mac" "$status" "$speed" "$bridge" "$bond_master"
  done
}

########################

########### Proxmox commands #######
proxmox_instances_info() {
  TMP=$(mktemp)
  VLAN_PRESENT=0

  detect_vlan() {
    for vmid in $(pct list | awk 'NR>1 {print $1}'); do
      config="$(pct config "$vmid" 2>/dev/null)"
      if echo "$config" | grep -qP '^net\d+:.*tag='; then
        VLAN_PRESENT=1
        return
      fi
    done
    for vmid in $(qm list | awk 'NR>1 {print $1}'); do
      config="$(qm config "$vmid" 2>/dev/null)"
      if echo "$config" | grep -qP '^net\d+:.*tag='; then
        VLAN_PRESENT=1
        return
      fi
    done
  }

  detect_vlan

  if (( VLAN_PRESENT )); then
    printf_format="%-6s %-26s %-10s %-30s %-10s %-6s %-8s %-15s %-10s %-12s %-8s\n"
    printf "$printf_format" "Type" "Name" "Status" "IP Address(es)" "Bridge" "VLAN" "OnBoot" "Storage" "DiskSize" "VMID" "Note"
  else
    printf_format="%-6s %-26s %-10s %-30s %-10s %-8s %-15s %-10s %-12s %-8s\n"
    printf "$printf_format" "Type" "Name" "Status" "IP Address(es)" "Bridge" "OnBoot" "Storage" "DiskSize" "VMID" "Note"
  fi

  get_vlan() {
    local net_line="$1"
    local vlan=$(echo "$net_line" | grep -oP 'tag=\K[0-9]+')
    [[ -z "$vlan" ]] && vlan="-"
    echo "$vlan"
  }

  get_lxc_disk_size() {
    local config="$1"
    local size=$(echo "$config" | grep -oP '^rootfs:.*size=\K[0-9]+[GM]')
    [[ -z "$size" ]] && echo "0.0G" && return
    echo "$size" | sed 's/G$/\.0G/; s/M$/M/'
  }

  get_qemu_disk_size() {
    local vmid="$1"
    local total=0
    local tmpfile=$(mktemp)
    qm config "$vmid" >"$tmpfile"
    while IFS= read -r line; do
      case "$line" in
      virtio*:* | scsi*:* | sata*:* | ide*:*)
        [[ "$line" == *cloudinit* ]] && continue
        [[ "$line" == *media=cdrom* ]] && continue
        local vol=$(echo "$line" | cut -d' ' -f2 | cut -d',' -f1 | xargs)
        [[ -z "$vol" ]] && continue
        local storage="${vol%%:*}"
        local vol_id="${vol#*:}"
        if [[ "$storage" == "local-lvm" ]]; then
          local lv_path=$(lvs --noheadings -o lv_path | grep "/$vol_id" | xargs)
          if [[ -n "$lv_path" ]]; then
            local size=$(lvs --noheadings --units g -o lv_size "$lv_path" 2>/dev/null | awk '{gsub(/[[:space:]]|g/,""); print}')
            [[ -z "$size" ]] && size="0"
            total=$(echo "$total + $size" | bc)
          fi
        fi
        ;;
      esac
    done <"$tmpfile"
    rm -f "$tmpfile"
    printf "%.1fG\n" "$total"
  }

  get_lxc_info() {
    local vmid="$1"
    local config="$(pct config "$vmid" 2>/dev/null)"
    local name=$(echo "$config" | awk -F ': ' '/^hostname:/ {print $2}')
    local status=$(pct status "$vmid" | awk '{print $2}')
    local ip=$(echo "$config" | grep -oP 'ip=\K[^,]+' | paste -sd "," -)
    [[ -z "$ip" ]] && ip="N/A"
    local onboot=$(echo "$config" | awk -F ': ' '/^onboot:/ {print $2}')
    [[ -z "$onboot" ]] && onboot="no"
    local storage_vol=$(echo "$config" | grep -oP '^rootfs: \K[^,]+')
    local storage="${storage_vol%%:*}"
    [[ -z "$storage" ]] && storage="N/A"
    local disk_size=$(get_lxc_disk_size "$config")
    local net_line=$(echo "$config" | grep -m1 "^net")
    local bridge=$(echo "$net_line" | grep -oP 'bridge=\K[^,]+')
    [[ -z "$bridge" ]] && bridge="N/A"
    local vlan=$(get_vlan "$net_line")
    local note=$(echo "$config" | awk -F ': ' '/^description:/ {print $2}')
    [[ -z "$note" ]] && note="-"

    if (( VLAN_PRESENT )); then
      printf "$printf_format" "LXC" "$name" "$status" "$ip" "$bridge" "$vlan" "$onboot" "$storage" "$disk_size" "$vmid" "$note" >>"$TMP"
    else
      printf "$printf_format" "LXC" "$name" "$status" "$ip" "$bridge" "$onboot" "$storage" "$disk_size" "$vmid" "$note" >>"$TMP"
    fi
  }

  get_qemu_info() {
    local vmid="$1"
    local config="$(qm config "$vmid" 2>/dev/null)"
    local name=$(echo "$config" | awk -F ': ' '/^name:/ {print $2}')
    local status=$(qm status "$vmid" | awk '{print $2}')
    local onboot=$(echo "$config" | awk -F ': ' '/^onboot:/ {print $2}')
    [[ -z "$onboot" ]] && onboot="no"
    local disk_line=$(echo "$config" | grep -E '^(virtio|scsi|sata|ide)[0-9]+:')
    local storage_vol=$(echo "$disk_line" | grep -oP '^\w+0: \K[^,]+')
    local storage="${storage_vol%%:*}"
    [[ -z "$storage" ]] && storage="N/A"
    local disk_size=$(get_qemu_disk_size "$vmid")
    local ip_list="N/A"
    if [[ "$status" == "running" ]]; then
      ip_list=$(qm guest cmd "$vmid" network-get-interfaces 2>/dev/null |
        jq -r '.[]? | .["ip-addresses"][]? | select(.["ip-address"] | test("^[0-9.]+$")) | .["ip-address"]' |
        grep -v '^127\\.0\\.0\\.1$' | paste -sd "," -)
      [[ -z "$ip_list" ]] && ip_list="N/A"
    fi
    local net_line=$(echo "$config" | grep -m1 "^net")
    local bridge=$(echo "$net_line" | grep -oP 'bridge=\K[^,]+')
    [[ -z "$bridge" ]] && bridge="N/A"
    local vlan=$(get_vlan "$net_line")
    local note=$(echo "$config" | awk -F ': ' '/^(description|notes):/ {print $2}' | head -n1)
    [[ -z "$note" ]] && note="-"

    if (( VLAN_PRESENT )); then
      printf "$printf_format" "QEMU" "$name" "$status" "$ip_list" "$bridge" "$vlan" "$onboot" "$storage" "$disk_size" "$vmid" "$note" >>"$TMP"
    else
      printf "$printf_format" "QEMU" "$name" "$status" "$ip_list" "$bridge" "$onboot" "$storage" "$disk_size" "$vmid" "$note" >>"$TMP"
    fi
  }

  (
    job_count=0
    MAX_JOBS=15
    for vmid in $(pct list | awk 'NR>1 {print $1}'); do
      { get_lxc_info "$vmid"; } &>/dev/null &
      ((++job_count >= MAX_JOBS)) && wait && job_count=0
    done
    for vmid in $(qm list | awk 'NR>1 {print $1}'); do
      { get_qemu_info "$vmid"; } &>/dev/null &
      ((++job_count >= MAX_JOBS)) && wait && job_count=0
    done
    wait
  ) 2>/dev/null

  sort -k10n "$TMP"
  rm -f "$TMP"
}

### Disable auto-start all:
proxmox_disable_all_autostart() {
  echo "Disabling 'onboot' for all LXC containers..."
  for CTID in $(pct list | awk 'NR>1 {print $1}'); do
    pct set $CTID --onboot 0
  done

  echo "Disabling 'onboot' for all KVM virtual machines..."
  for VMID in $(qm list | awk 'NR>1 {print $1}'); do
    qm set $VMID --onboot 0
  done
}

proxmox_enable_all_autostart() {
  # Enable autostart for all:
  echo "Enabling 'onboot' for all LXC containers..."
  for CTID in $(pct list | awk 'NR>1 {print $1}'); do
    pct set $CTID --onboot 1
  done

  echo "Enabling 'onboot' for all KVM virtual machines..."
  for VMID in $(qm list | awk 'NR>1 {print $1}'); do
    qm set $VMID --onboot 1
  done
}

####################################
